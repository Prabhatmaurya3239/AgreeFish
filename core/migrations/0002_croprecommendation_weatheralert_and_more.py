# Generated by Django 4.2.7 on 2025-09-17 21:35

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CropRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_lat', models.FloatField()),
                ('location_lng', models.FloatField()),
                ('season', models.CharField(max_length=20)),
                ('recommended_crops', models.JSONField()),
                ('climate_data', models.JSONField(blank=True, null=True)),
                ('soil_recommendations', models.JSONField(blank=True, null=True)),
                ('generated_by', models.CharField(default='gemini_ai', max_length=50)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeatherAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('rain', 'Heavy Rain'), ('drought', 'Drought Warning'), ('hail', 'Hail Storm'), ('frost', 'Frost Warning'), ('heat', 'Heat Wave'), ('wind', 'Strong Winds')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('extreme', 'Extreme')], max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('region', models.CharField(max_length=100)),
                ('coordinates', models.JSONField()),
                ('starts_at', models.DateTimeField()),
                ('ends_at', models.DateTimeField()),
                ('farming_advice', models.TextField()),
                ('precautions', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='bookingstatusupdate',
            name='location_lat',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='bookingstatusupdate',
            name='location_lng',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='cropdiseasedetection',
            name='ai_analysis',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='cropdiseasedetection',
            name='analysis_method',
            field=models.CharField(default='gemini_ai', max_length=50),
        ),
        migrations.AddField(
            model_name='cropdiseasedetection',
            name='disease_id',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name='cropdiseasedetection',
            name='plant_id',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name='cropdiseasedetection',
            name='processing_time',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='cropdiseasedetection',
            name='severity',
            field=models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10),
        ),
        migrations.AddField(
            model_name='cropdiseasedetection',
            name='urgency',
            field=models.CharField(default='routine', max_length=20),
        ),
        migrations.AddField(
            model_name='farmerprofile',
            name='farming_experience_years',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='farmerprofile',
            name='preferred_farming_method',
            field=models.CharField(choices=[('organic', 'Organic'), ('conventional', 'Conventional'), ('mixed', 'Mixed')], default='conventional', max_length=50),
        ),
        migrations.AddField(
            model_name='notification',
            name='is_sent',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='notification',
            name='priority',
            field=models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10),
        ),
        migrations.AddField(
            model_name='notification',
            name='read_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='notification',
            name='related_detection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.cropdiseasedetection'),
        ),
        migrations.AddField(
            model_name='notification',
            name='send_email',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='notification',
            name='send_push',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='notification',
            name='send_sms',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='servicebooking',
            name='actual_duration_hours',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='servicebooking',
            name='urgency',
            field=models.CharField(choices=[('routine', 'Routine'), ('within_week', 'Within Week'), ('immediate', 'Immediate')], default='routine', max_length=20),
        ),
        migrations.AddField(
            model_name='servicebooking',
            name='work_completed_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='servicebooking',
            name='work_started_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='auto_speak',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='auto_translate',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='voice_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='workerprofile',
            name='certifications',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='workerprofile',
            name='specializations',
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name='workerprofile',
            name='total_earnings',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
        ),
        migrations.AddField(
            model_name='workerreview',
            name='communication_rating',
            field=models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='workerreview',
            name='helpful_votes',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='workerreview',
            name='is_verified',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='workerreview',
            name='punctuality_rating',
            field=models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='workerreview',
            name='quality_rating',
            field=models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('booking_created', 'Booking Created'), ('booking_accepted', 'Booking Accepted'), ('booking_completed', 'Booking Completed'), ('booking_cancelled', 'Booking Cancelled'), ('payment_success', 'Payment Success'), ('disease_detected', 'Disease Detected'), ('worker_nearby', 'Worker Nearby'), ('system_update', 'System Update'), ('weather_alert', 'Weather Alert')], max_length=20),
        ),
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('response', models.TextField()),
                ('context', models.TextField(blank=True)),
                ('language', models.CharField(default='en', max_length=5)),
                ('model_used', models.CharField(default='gemini-1.5-pro', max_length=50)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('response_time', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.userprofile')),
            ],
            options={
                'verbose_name_plural': 'Chat histories',
                'ordering': ['-created_at'],
            },
        ),
    ]
